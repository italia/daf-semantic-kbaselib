Prefix(:=<http://dati.gov.it/onto/person/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://dati.gov.it/onto/person/>
<http://dati.gov.it/onto/person/0.1>

Declaration(Class(:Account))
Declaration(Class(:Activity))
Declaration(Class(:Address))
Declaration(Class(:Agent))
Declaration(Class(:City))
Declaration(Class(:Country))
Declaration(Class(:LegalEntity))
Declaration(Class(:LegalPerson))
Declaration(Class(:Location))
Declaration(Class(:Person))
Declaration(Class(:Street))
Declaration(ObjectProperty(:hasAccount))
Declaration(ObjectProperty(:hasActivity))
Declaration(ObjectProperty(:hasAddress))
Declaration(ObjectProperty(:hasBirthPalce))
Declaration(ObjectProperty(:hasCity))
Declaration(ObjectProperty(:hasDeathPlace))
Declaration(ObjectProperty(:hasLegalAddress))
Declaration(ObjectProperty(:hasLegalPerson))
Declaration(ObjectProperty(:hasLocation))
Declaration(ObjectProperty(:hasParent))
Declaration(ObjectProperty(:hasRelationshipWith))
Declaration(ObjectProperty(:hasStreet))
Declaration(ObjectProperty(:isAccountOf))
Declaration(ObjectProperty(:isActivityOf))
Declaration(ObjectProperty(:isBirthPlaceOf))
Declaration(ObjectProperty(:isDeathPlaceOf))
Declaration(ObjectProperty(:isLegalPersonOf))
Declaration(ObjectProperty(:isLocationOf))
Declaration(ObjectProperty(:isParentOf))
Declaration(ObjectProperty(:knows))
Declaration(DataProperty(:altName))
Declaration(DataProperty(:birthDate))
Declaration(DataProperty(:familyName))
Declaration(DataProperty(:givenName))
Declaration(DataProperty(:identifier))
Declaration(DataProperty(:name))
Declaration(DataProperty(:postalCode))
Declaration(DataProperty(:streetNumber))
AnnotationAssertion(rdfs:label :Account "Account"@it)
AnnotationAssertion(rdfs:comment :Account "Any account that can be associated with an agent. E.g. the Twitter account of 'John White'."@en)
AnnotationAssertion(rdfs:label :Account "Account"@en)
AnnotationAssertion(rdfs:comment :Account "Qualsiasi account che possa essere associato ad un agente. Ex. l'account Twitter di 'Mario Rossi'."@it)
SubClassOf(:Account :Agent)
AnnotationAssertion(rdfs:label :Address "Address"@en)
AnnotationAssertion(rdfs:label :Address "Indirizzo"@it)
SubClassOf(:Address :Location)
SubClassOf(:Address ObjectExactCardinality(1 :hasCity :City))
SubClassOf(:Address ObjectExactCardinality(1 :hasStreet :Street))
SubClassOf(:Address DataExactCardinality(1 :postalCode xsd:int))
SubClassOf(:Address DataExactCardinality(1 :streetNumber xsd:int))
DisjointClasses(:Address :City)
DisjointClasses(:Address :Street)
SubClassOf(:Agent DataSomeValuesFrom(:name xsd:string))
SubClassOf(:Agent DataAllValuesFrom(:altName xsd:string))
AnnotationAssertion(rdfs:label :City "Città"@it)
AnnotationAssertion(rdfs:label :City "City"@en)
SubClassOf(:City :Location)
DisjointClasses(:City :Street)
AnnotationAssertion(rdfs:label :Country "Paese"@it)
AnnotationAssertion(rdfs:label :Country "Country"@en)
SubClassOf(:Country :Location)
SubClassOf(:LegalEntity :Agent)
SubClassOf(:LegalEntity ObjectSomeValuesFrom(:hasAddress :Address))
SubClassOf(:LegalEntity ObjectExactCardinality(1 :hasLegalAddress :Address))
SubClassOf(:LegalEntity DataExactCardinality(1 :identifier))
SubClassOf(:LegalPerson :LegalEntity)
SubClassOf(:Location DataSomeValuesFrom(:name xsd:string))
AnnotationAssertion(rdfs:label :Person "Person"@en)
AnnotationAssertion(rdfs:comment :Person "A natural person"@en)
AnnotationAssertion(rdfs:comment :Person "Una persona naturale"@it)
AnnotationAssertion(rdfs:label :Person "Persona"@it)
SubClassOf(:Person :Agent)
SubClassOf(:Person ObjectExactCardinality(1 :hasLegalPerson :LegalPerson))
AnnotationAssertion(rdfs:label :Street "Strada"@it)
AnnotationAssertion(rdfs:label :Street "Street"@en)
SubClassOf(:Street :Location)
AnnotationAssertion(rdfs:label :hasAccount "has account"@en)
AnnotationAssertion(rdfs:label :hasAccount "ha account"@it)
AnnotationAssertion(rdfs:comment :hasAccount "Relation between an agent and an account. E.g. this property allows to associate 'John White' with his Twitter account."@en)
AnnotationAssertion(rdfs:comment :hasAccount "Relazione tra un agente ed un account. Ex. questa proprietà permette di associare 'Mario Rossi' al suo account Twitter."@it)
InverseObjectProperties(:isAccountOf :hasAccount)
ObjectPropertyDomain(:hasAccount :Agent)
ObjectPropertyRange(:hasAccount :Account)
AnnotationAssertion(rdfs:label :hasActivity "has activity"@en)
AnnotationAssertion(rdfs:comment :hasActivity "Relazione tra una persona giuridica ed una possibile attività economica."@it)
AnnotationAssertion(rdfs:comment :hasActivity "Relation between a legal person and any possible business activity."@en)
AnnotationAssertion(rdfs:label :hasActivity "ha attività"@it)
ObjectPropertyDomain(:hasActivity :LegalPerson)
ObjectPropertyRange(:hasActivity :Activity)
SubObjectPropertyOf(:hasAddress :hasLocation)
ObjectPropertyRange(:hasAddress :Address)
AnnotationAssertion(rdfs:label :hasBirthPalce "luogo di nascita"@it)
AnnotationAssertion(rdfs:label :hasBirthPalce "birth place"@en)
InverseObjectProperties(:isBirthPlaceOf :hasBirthPalce)
ObjectPropertyDomain(:hasBirthPalce :Person)
ObjectPropertyRange(:hasBirthPalce :Location)
SubObjectPropertyOf(:hasCity :hasLocation)
ObjectPropertyDomain(:hasCity owl:Thing)
ObjectPropertyRange(:hasCity :City)
AnnotationAssertion(rdfs:label :hasDeathPlace "death place"@en)
AnnotationAssertion(rdfs:label :hasDeathPlace "luogo di morte"@it)
InverseObjectProperties(:isDeathPlaceOf :hasDeathPlace)
ObjectPropertyDomain(:hasDeathPlace :Person)
ObjectPropertyRange(:hasDeathPlace :Location)
SubObjectPropertyOf(:hasLegalAddress :hasAddress)
ObjectPropertyDomain(:hasLegalAddress :LegalEntity)
ObjectPropertyRange(:hasLegalAddress :Address)
AnnotationAssertion(rdfs:label :hasLegalPerson "ha persona giuridica"@it)
AnnotationAssertion(rdfs:label :hasLegalPerson "has legal person"@en)
AnnotationAssertion(rdfs:comment :hasLegalPerson "Relation between a physical person and a legal one."@en)
AnnotationAssertion(rdfs:comment :hasLegalPerson "Relazione tra una persona fisica ed una giuridica."@it)
InverseObjectProperties(:isLegalPersonOf :hasLegalPerson)
ObjectPropertyDomain(:hasLegalPerson :Person)
ObjectPropertyRange(:hasLegalPerson :LegalPerson)
InverseObjectProperties(:isLocationOf :hasLocation)
ObjectPropertyDomain(:hasLocation owl:Thing)
ObjectPropertyRange(:hasLocation :Location)
AnnotationAssertion(rdfs:label :hasParent "has parent"@en)
AnnotationAssertion(rdfs:comment :hasParent "La relazione figlio-padre. Ex. 'Mario Rossi' ha padre 'Paolo Neri'."@it)
AnnotationAssertion(rdfs:label :hasParent "ha genitore"@it)
AnnotationAssertion(rdfs:comment :hasParent "The property that models child-parent relationship. E.g. 'John White' has parent 'Bob Black' means that 'Bob Black' is the parent of 'John White'."@en)
SubObjectPropertyOf(:hasParent :hasRelationshipWith)
InverseObjectProperties(:isParentOf :hasParent)
ObjectPropertyDomain(:hasParent :Person)
ObjectPropertyRange(:hasParent :Person)
AnnotationAssertion(rdfs:label :hasRelationshipWith "ha relazione con"@it)
AnnotationAssertion(rdfs:comment :hasRelationshipWith "Any relationship between agents."@en)
AnnotationAssertion(rdfs:label :hasRelationshipWith "has relationship with"@en)
AnnotationAssertion(rdfs:comment :hasRelationshipWith "Qualsiasi relazione tra agenti."@it)
ObjectPropertyDomain(:hasRelationshipWith :Agent)
ObjectPropertyRange(:hasRelationshipWith :Agent)
SubObjectPropertyOf(:hasStreet :hasLocation)
ObjectPropertyDomain(:hasStreet :Address)
ObjectPropertyRange(:hasStreet :Street)
AnnotationAssertion(rdfs:label :isAccountOf "is account of"@en)
AnnotationAssertion(rdfs:comment :isAccountOf "Relation between an account and an agent."@en)
AnnotationAssertion(rdfs:comment :isAccountOf "Relazione tra un account ed un agente."@it)
AnnotationAssertion(rdfs:label :isAccountOf "è account di"@it)
ObjectPropertyDomain(:isAccountOf :Account)
ObjectPropertyRange(:isAccountOf :Agent)
AnnotationAssertion(rdfs:label :isActivityOf "is activity of"@en)
AnnotationAssertion(rdfs:label :isActivityOf "è attività di"@it)
AnnotationAssertion(rdfs:comment :isActivityOf "Relation between an activity and a legal person."@en)
AnnotationAssertion(rdfs:comment :isActivityOf "Relazione tra un'attività ed una persona giuridica."@it)
ObjectPropertyDomain(:isActivityOf :Activity)
ObjectPropertyRange(:isActivityOf :LegalPerson)
ObjectPropertyDomain(:isBirthPlaceOf :Location)
ObjectPropertyRange(:isBirthPlaceOf :Person)
AnnotationAssertion(rdfs:label :isDeathPlaceOf "death place of"@en)
AnnotationAssertion(rdfs:label :isDeathPlaceOf "luogo di morte di"@it)
AnnotationAssertion(rdfs:comment :isDeathPlaceOf "The property to associate a death place (i.e. a location) with a person."@en)
AnnotationAssertion(rdfs:comment :isDeathPlaceOf "La proprietà per associare un luogo (i.e. una località) ad una persona a persona per rappresentare il luogo di morte di quest'ultima."@it)
ObjectPropertyDomain(:isDeathPlaceOf :Location)
ObjectPropertyRange(:isDeathPlaceOf :Person)
AnnotationAssertion(rdfs:comment :isLegalPersonOf "Relation between a legal person and a physical person."@en)
AnnotationAssertion(rdfs:label :isLegalPersonOf "è persona giuridica di"@it)
AnnotationAssertion(rdfs:comment :isLegalPersonOf "Relazione tra una persona giuridica e una persona fisica."@it)
AnnotationAssertion(rdfs:label :isLegalPersonOf "is legal person of"@en)
ObjectPropertyDomain(:isLegalPersonOf :LegalPerson)
ObjectPropertyRange(:isLegalPersonOf :Person)
AnnotationAssertion(rdfs:label :isParentOf "La relazione padre-figlio."@it)
AnnotationAssertion(rdfs:label :isParentOf "The parent-child relationship."@en)
AnnotationAssertion(rdfs:label :isParentOf "is parent of"@en)
AnnotationAssertion(rdfs:label :isParentOf "è genitore di"@it)
SubObjectPropertyOf(:isParentOf :hasRelationshipWith)
ObjectPropertyDomain(:isParentOf :Person)
ObjectPropertyRange(:isParentOf :Person)
AnnotationAssertion(rdfs:label :knows "knows"@en)
AnnotationAssertion(rdfs:comment :knows "La relazione di conoscenza che intercorre tra due persone. Ex. 'Mario Rossi' conosce 'Paolo Neri'."@it)
AnnotationAssertion(rdfs:label :knows "conosce"@it)
AnnotationAssertion(rdfs:comment :knows "The relationship of knowledge between two people. E.g. 'John White' knows 'Bob Black'."@en)
SubObjectPropertyOf(:knows :hasRelationshipWith)
SymmetricObjectProperty(:knows)
ObjectPropertyDomain(:knows :Person)
ObjectPropertyRange(:knows :Person)
DataPropertyDomain(:altName owl:Thing)
DataPropertyRange(:altName xsd:string)
DataPropertyDomain(:birthDate :Person)
DataPropertyRange(:birthDate xsd:date)
AnnotationAssertion(rdfs:label :familyName "cognome"@it)
AnnotationAssertion(rdfs:label :familyName "family name"@en)
AnnotationAssertion(rdfs:comment :familyName "Il cognome di una persona. Ex. 'Rossi' è il cognome della persona 'Mario Rossi'"@it)
AnnotationAssertion(rdfs:comment :familyName "The family name of a person. E.g. 'Rossi' is the family name of the person 'Mario Rossi'."@en)
DataPropertyDomain(:familyName :Person)
DataPropertyRange(:familyName xsd:string)
AnnotationAssertion(rdfs:comment :givenName "Il nome di una persona. Ex. 'Mario' è il nome della persona 'Mario Rossi'."@it)
AnnotationAssertion(rdfs:label :givenName "given name"@en)
AnnotationAssertion(rdfs:label :givenName "nome"@it)
AnnotationAssertion(rdfs:comment :givenName "The given name of a person. E.g. 'Mario' is the given name of the person 'Mario Rossi'."@en)
DataPropertyDomain(:givenName :Person)
DataPropertyRange(:givenName xsd:string)
DataPropertyDomain(:identifier owl:Thing)
DataPropertyRange(:identifier rdfs:Literal)
AnnotationAssertion(rdfs:comment :name "The name used for referencing any individual of the class Agent. E.g. 'Mario Rossi' is the name of the person 'Mario Rossi' or 'CNR' is one of the possible alternatives used for referencing the National Italian Council for Research."@en)
AnnotationAssertion(rdfs:label :name "nome"@it)
AnnotationAssertion(rdfs:comment :name "Il nome con cui ci si referisce ad un individiduo della classe Agent. Ex. 'Mario Rossi' è il nome della persona 'Mario Rossi' oppure 'CNR' è uno dei possibili nomi con cui ci si riferisce al Consiglio Nazionale delle Ricerche."@it)
AnnotationAssertion(rdfs:label :name "name"@en)
DataPropertyDomain(:name :Agent)
DataPropertyRange(:name xsd:string)
AnnotationAssertion(rdfs:label :postalCode "codice postale"@it)
AnnotationAssertion(rdfs:comment :postalCode "Il codice postale associato ad un indirizzo o una città."@it)
AnnotationAssertion(rdfs:comment :postalCode "The postal code associated with an address or a city."@en)
AnnotationAssertion(rdfs:label :postalCode "postal code"@en)
DataPropertyDomain(:postalCode ObjectUnionOf(:City :Address))
DataPropertyRange(:postalCode xsd:int)
AnnotationAssertion(rdfs:comment :streetNumber "Il numero civico di un indirizzo."@it)
AnnotationAssertion(rdfs:label :streetNumber "numero civico"@it)
AnnotationAssertion(rdfs:label :streetNumber "street number"@en)
AnnotationAssertion(rdfs:comment :streetNumber "The street number of an address."@en)
DataPropertyDomain(:streetNumber :Address)
DataPropertyRange(:streetNumber xsd:int)
HasKey(:Address (:hasCity :hasStreet) (:streetNumber))
)